#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app'),
debug = require('debug')('te2dMvc:server'),
http = require('http'),
UserSocket = require('../model/UserSocket'),
jwt    = require('jsonwebtoken'),
secret = 'chathonMignonPleinD****';

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('1338');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

var usersS = [];

// Si connection du client en mode socket
io.on('connection', function (socket) {
  jwt.verify(socket.handshake.query.token, secret, function(err, decoded) {
    var token = decoded;
    var userSo = addUser(new UserSocket({
        pseudo: token._doc.pseudo,
        socketId: socket.id
    }));
    socket.on('iWantPlayWith', function (data) {
        var friendId = findUserByPseudo(data.pseudo);
        if(friendId){
          io.sockets.connected[friendId].emit('iWantPlayWith', userSo.pseudo);
          socket.on('sendPositionToHim', function (data) {
            io.sockets.connected[friendId].emit('sendPositionToMe', data);
          });
        }else{
          socket.emit('server', 'Votre ami n\'est pas connecté.');
        }
    });

    socket.on('disconnect', function() {
        console.log('Vous avez ete deconnecte');
        deleteUserByPseudo(userSo.pseudo);
     });
    socket.emit('server', 'Vous êtes en ligne '+userSo.pseudo);
  });
});

function addUser(userData){
  var x = 0,
  lengthX = usersS.length;
  for(;x<lengthX;x++){
    if(usersS[x].pseudo == userData.pseudo){
      usersS[x] = userData;
      return usersS[x];
    }
  }
  var x2 = usersS.length;
  usersS[x2] = userData;
  return usersS[x2];
}
function findUserByPseudo(pseudo){
  var x = 0,
  lengthX = usersS.length;
  for(;x<lengthX;x++){
    if(usersS[x].pseudo == pseudo){
      return usersS[x].socketId;
    }
  }
  return false;
}
function deleteUserByPseudo(pseudo){
  var x = 0,
  lengthX = usersS.length;
  for(;x<lengthX;x++){
    if(typeof usersS[x] != "undefined"){
      if(usersS[x].pseudo == pseudo){
        usersS.splice(x, 1);
      }
    }
  }
}

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
